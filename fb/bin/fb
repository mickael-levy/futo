#!/bin/zsh

dir=$HOME/.bin/fb

case $1 in
  rm)
    name=$2
    
    if projectid=$( cat ${2:-.}/.firebaserc | sed -n '/default/{s/^.*"\([a-z0-9-]*\)"/\1/;p;}' ); then
      url="https://console.firebase.google.com/project/$projectid/settings/general"
      open $url
      echo
      echo "To delete project on firebase go to your browser and newly opened link $url and click on \"Delete project\" in the absolute bottom of the page"
      echo
      echo "(Once you are done, close the tab and hit enter to continue)"
      read
    fi
    
    mui rm $name
      
    echo
    echo "===============================================================" 
    echo "ðŸŽ‰ Congratulations! Your project has been successfully deleted." 
    echo "===============================================================" 
    echo
    ;;
  *)
    name=$1
    ccname=${${(C)name}//-} # camel case name

    if mui $name; then 
      projectid=$name-$( openssl rand -base64 16 | tr -d "=+/" | cut -c1-5 | tr '[:upper:]' '[:lower:]' )
      cd $name

      ### MINIMAL
      firebase projects:create --non-interactive -n $ccname $projectid 

      url=https://console.firebase.google.com/project/$projectid/settings/general/web
      open $url
      echo
      echo "Hey! To continue Firestore Cloud storage integration go to your chrome browser to newly opened link $url and set Google Cloud Platform (GCP) resource location and public-facing name to $ccname."
      echo
      echo "(Once you are done, close the tab and hit enter to continue)"
      read

      url=https://console.cloud.google.com/datastore/welcome?project=$projectid
      open $url
      echo "Perfect. Now go to your browser to this newly opened link $url and switch Google's Firestore to Native mode. Then wait around 1 minute."
      echo 
      echo "(Once you are done, close the tab and hit enter to continue)"
      read

      $dir/exp/firestore-init $projectid && $dir/exp/storage-init $projectid && firebase use $projectid
      # createapp == e.g. "firebase apps:sdkconfig WEB 1:233313016915:web:e6430e12bd463eb6027aa6"
      createapp=$( firebase apps:create WEB $ccname | tail -n1 | awk '{$1=$1};1' ) # awk = trim leading and trailing whitespace

      npm install firebase firebase-admin # SERVER SIDE HERE TOO
      cp $dir/src/app/core/utils/*.js app/core/utils/
      sed -i '' "/databaseURL/s/projectid/$projectid/" app/core/utils/server.js # SERVER SIDE
      $( echo $createapp ) | sed -n '/^firebase/,/^})/p' | sed 's/^/  /' | sed -i '' '/^if (!firebase\.apps\.length)/r /dev/stdin' app/core/utils/firebase.js
      
      # firestore.rules setup
      cp $dir/src/firestore.rules firestore.rules
      cp $dir/src/storage.rules storage.rules
      sed -i '' "s/projectid/$projectid/" storage.rules
      firebase deploy
      
      # SERVER SIDE SERVICE ACCOUNT 
      gcloud config set project $projectid
      iamaccount=$( gcloud iam service-accounts list | grep firebase-adminsdk | sed 's/  */ /g' | cut -d ' ' -f 2 )
      gcloud iam service-accounts keys create /tmp/keys --iam-account=$iamaccount
      keysbase64="$( cat /tmp/keys | base64 )" # Is used at the ending prompts

      # CYPRESS INSTALL & CONFIGURATION
      npm install cypress --save-dev
      cp $dir/src/cypress.json .
      cp -r $dir/src/cypress .
      sed -i '' "s/\(^\/coverage\)/\1\n\/cypress\/screenshots\n\/cypress\/videos/g" .gitignore

      ## MAIN
      npm install @futo-ui/hooks@0.11.26 @futo-ui/utils@0.8.54
      cp $dir/src/next.config.js .
      cp $dir/src/app/core/*.js app/core/
      cp $dir/src/app/core/form/*.js app/core/form/
      cp $dir/src/app/core/layouts/*.js app/core/layouts/
      cp $dir/src/pages/*.js pages/ # theme.js because of error handling + stories.js & create.js
      cp $dir/src/public/name.png public/$name.png
      cp -r $dir/src/app/core/locales app/core/locales
      cp -r $dir/src/app/post app/post
      cp -r $dir/src/app/profile app/profile 
      cp -r $dir/src/app/story app/story 
      cp -r $dir/src/app/user app/user
      cp -r $dir/src/pages/account pages/ # account pages

      ## MODIFICATIONS
      sed -i '' "/^    <Avatar/s/name/$name/g" app/core/Logo.js
      sed -i '' "s/myapp/$name/g" app/core/layouts/PageLayout.js
      sed -i '' "s/MyApp/$ccname/g" app/post/PostJoinDialog.js
      sed -i '' "/<meta property=\"og:url\"/s/myapp/$name/" pages/\[username\].js # PROFILE PAGE META TAGS
      sed -i '' "/<meta name=\"twitter:site\"/s/myapp/$name/" pages/\[username\].js # PROFILE PAGE META TAGS
      
      ### Add AuthProvider
      sed -i '' "s/import { theme } from 'core\/utils'/&\nimport { AuthProvider } from 'user'/" pages/_app.js
      sed -i '' "s/      <ThemeProvider theme={theme}>/      <AuthProvider>\n&/" pages/_app.js
      sed -i '' "s/      <\/ThemeProvider>/&\n      <\/AuthProvider>/" pages/_app.js
      sed -i '' '/<ThemeProvider/,/<\/ThemeProvider/s/^/  /g' pages/_app.js

      ### Stories
      cp -r $dir/src/pages/s pages/ 

      echo 
      echo "We are going to configure firebase-admin, enable E-mail/Password authentication, create a compound query for the post feed, a compound query for the story feed and set an e-mail template for password reset."
      echo
      
      echo 
      url="https://vercel.com/$(vercel whoami)/$name/settings/environment-variables"
      echo "(1/5) First, finish configuration for server side firebase, add an environment variable on just opened link $url with following values:"
      echo "NAME: GOOGLE_APP_CREDENTIALS"
      echo "VALUE: "
      echo $keysbase64
      echo "ENVIRONMENT: Production, Preview, Development"
      open $url
      echo
      echo "(Once you are done, close the tab and hit enter to continue)"
      read
      
      echo 
      url=https://console.firebase.google.com/project/$projectid/authentication
      echo "(2/5) Second, enable authentication by clicking on 'Get Started' on just opened link $url. After that enable E-mail/Password authentication by clicking on 'Email/Password and enabling the first toggle control.'"
      open $url
      echo
      echo "(Once you are done, close the tab and hit enter to continue)"
      read
     
      echo 
      url=https://console.firebase.google.com/project/$projectid/firestore/indexes
      echo "(3/5) To create a compound query necessary for post feed go to newly opened link $url. Click on small link 'Create Index' and the fill out following fields:"
      echo "Collection ID: posts"
      echo "Field #1: profileId | Ascending" 
      echo "Field #2: timestamp | Descending"
      echo "Query Scopes: Collection"
      open $url
      echo 
      echo "(Once you are done, leave the tab open and hit enter to continue)"
      read
      
      echo 
      echo "(4/5) To create a compound query necessary for the story feed follow the same previous steps, but with following data:"
      echo "Collection ID: stories"
      echo "Field #1: profileId | Ascending" 
      echo "Field #2: editedAt | Descending"
      echo "Query Scopes: Collection"
      echo 
      echo "(Once you are done, close the tab and hit enter to continue)"
      read
      
      echo
      url=https://console.firebase.google.com/project/$projectid/authentication/emails
      echo "(5/5) To set an e-mail template for password reset go to another newly opened link $url, click on 'Password reset' and fill out following fields. Don't forget to change 'Your name' to your name:"
      echo "Sender name: Your name"
      echo "Subject: %APP_NAME% - Reset your password"
      echo "Message:"
      find $dir/templates -type f -exec cat {} \; -exec echo \;
      echo "Action URL: https://$name.vercel.app/account/confirm"
      open $url
      
      echo 
      echo "(Once you are done, close the tab and hit enter to continue)"
      read

      echo
      echo "======================================" 
      echo "ðŸŽ‰ Congratulations! That's everything." 
      echo "======================================" 
      echo
    else
      exit 1
    fi
    ;;
esac
